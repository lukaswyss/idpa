// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Participant {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  entries    DayEntry[]
  memberships ChallengeMembership[]
  user       User?
}

model Action {
  id        String   @id @default(cuid())
  code      String   @unique
  label     String
  category  String   // "Public", "Work", "Private", "Digital"
  weight    Int      // e.g. +3 / -2
  polarity  String   // "positive" | "negative"
  // optional: isActive Boolean @default(true)
  entryActions EntryAction[]
}

model DayEntry {
  id            String        @id @default(cuid())
  participantId String
  date          DateTime
  note          String? 
  totalScore    Int
  // Optional association to a Challenge so entries can be scoped per challenge
  challengeId   String?
  participant   Participant   @relation(fields: [participantId], references: [id])
  challenge     Challenge?    @relation(fields: [challengeId], references: [id])
  actions       EntryAction[]
  // Allow one entry per participant, date and challenge context (null means general)
  @@unique([participantId, date, challengeId])
}

model EntryAction {
  id         String   @id @default(cuid())
  dayEntryId String
  actionId   String
  dayEntry   DayEntry @relation(fields: [dayEntryId], references: [id])
  action     Action   @relation(fields: [actionId], references: [id])
  @@unique([dayEntryId, actionId])
}

model Challenge {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  code        String                 @unique
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  startScore  Int                    @default(0)
  days        ChallengeDay[]
  memberships ChallengeMembership[]
  entries     DayEntry[]
}

model ChallengeDay {
  id          String    @id @default(cuid())
  challengeId String
  date        DateTime
  question    String?
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  @@unique([challengeId, date])
}

model ChallengeMembership {
  id            String      @id @default(cuid())
  participantId String
  challengeId   String
  joinedAt      DateTime    @default(now())
  participant   Participant @relation(fields: [participantId], references: [id])
  challenge     Challenge   @relation(fields: [challengeId], references: [id])
  @@unique([participantId, challengeId])
}

// Users represent visitors of the site and can be anonymous by default.
// They are linked 1:1 to a Participant for existing data continuity.
model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  participantId String     @unique
  displayName   String?
  email         String?    @unique

  participant   Participant @relation(fields: [participantId], references: [id])
  adminRoles    AdminRole[]
}

// AdminRole grants admin rights to a User. Presence of a record means admin.
model AdminRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String   @unique

  user      User     @relation(fields: [userId], references: [id])
}
