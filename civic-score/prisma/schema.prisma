// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Action {
  id        String   @id @default(cuid())
  code      String   @unique
  label     String
  category  String   // "Public", "Work", "Private", "Digital"
  weight    Int      // e.g. +3 / -2
  polarity  String   // "positive" | "negative"
  // optional: isActive Boolean @default(true)
  entryActions EntryAction[]
}

model DayEntry {
  id            String        @id @default(cuid())
  userId        String
  date          DateTime
  // Replaced free-text note with structured markers to avoid non-anonymous context
  markers       String[]      @default([])
  totalScore    Int
  // Optional JSON payload for structured answers to questions shown on a given day
  answers       Json?
  // Timing metrics: first/last answer timestamps and derived duration in ms
  firstAnswerAt DateTime?
  lastAnswerAt  DateTime?
  submittedAt   DateTime?
  durationMs    Int?
  // Optional association to a Challenge so entries can be scoped per challenge
  challengeId   String?
  user          User          @relation(fields: [userId], references: [id])
  challenge     Challenge?    @relation(fields: [challengeId], references: [id])
  actions       EntryAction[]
  @@unique([userId, date, challengeId])
}

model EntryAction {
  id         String   @id @default(cuid())
  dayEntryId String
  actionId   String
  dayEntry   DayEntry @relation(fields: [dayEntryId], references: [id])
  action     Action   @relation(fields: [actionId], references: [id])
  @@unique([dayEntryId, actionId])
}

model Challenge {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  code        String                 @unique
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  startScore  Int                    @default(0)
  abEnabled   Boolean                @default(false)
  // JSON configuration for quizzes and questions
  config      Json?
  memberships ChallengeMembership[]
  entries     DayEntry[]
}

// Removed ChallengeDay in favor of JSON config stored on Challenge

model ChallengeMembership {
  id            String      @id @default(cuid())
  userId        String
  challengeId   String
  joinedAt      DateTime    @default(now())
  abGroup       AbGroup?
  user          User        @relation(fields: [userId], references: [id])
  challenge     Challenge   @relation(fields: [challengeId], references: [id])
  @@unique([userId, challengeId])
}

enum AbGroup {
  A
  B
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  username      String     @unique
  passwordHash  String
  // Count of successful interactive logins
  loginCount    Int        @default(0)
  adminRoles    AdminRole[]
  sessions      AuthSession[]
  entries       DayEntry[]
  memberships   ChallengeMembership[]
}

// AdminRole grants admin rights to a User. Presence of a record means admin.
model AdminRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String   @unique

  user      User     @relation(fields: [userId], references: [id])
}

/// Simple session model to support user login sessions
model AuthSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique
  userId    String

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
